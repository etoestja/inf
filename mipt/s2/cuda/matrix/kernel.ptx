	.version 1.4
	.target sm_10, map_f64_to_f32
	// compiled with /usr/lib/nvidia-cuda-toolkit/lib//be
	// nvopencc 4.1 built on 2012-04-05

	//-----------------------------------------------------------
	// Compiling /tmp/tmpxft_00007578_00000000-9_kernel.cpp3.i (/tmp/ccBI#.8eU9NJ)
	//-----------------------------------------------------------

	//-----------------------------------------------------------
	// Options:
	//-----------------------------------------------------------
	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64
	//  -O3	(Optimization level)
	//  -g0	(Debug level)
	//  -m2	(Report advisories)
	//-----------------------------------------------------------

	.file	1	"<command-line>"
	.file	2	"/tmp/tmpxft_00007578_00000000-8_kernel.cudafe2.gpu"
	.file	3	"/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h"
	.file	4	"/usr/include/crt/device_runtime.h"
	.file	5	"/usr/include/host_defines.h"
	.file	6	"/usr/include/builtin_types.h"
	.file	7	"/usr/include/device_types.h"
	.file	8	"/usr/include/driver_types.h"
	.file	9	"/usr/include/surface_types.h"
	.file	10	"/usr/include/texture_types.h"
	.file	11	"/usr/include/vector_types.h"
	.file	12	"/usr/include/device_launch_parameters.h"
	.file	13	"/usr/include/crt/storage_class.h"
	.file	14	"kernel.cu"
	.file	15	"/usr/include/common_functions.h"
	.file	16	"/usr/include/math_functions.h"
	.file	17	"/usr/include/math_constants.h"
	.file	18	"/usr/include/device_functions.h"
	.file	19	"/usr/include/sm_11_atomic_functions.h"
	.file	20	"/usr/include/sm_12_atomic_functions.h"
	.file	21	"/usr/include/sm_13_double_functions.h"
	.file	22	"/usr/include/sm_20_atomic_functions.h"
	.file	23	"/usr/include/sm_20_intrinsics.h"
	.file	24	"/usr/include/sm_30_intrinsics.h"
	.file	25	"/usr/include/surface_functions.h"
	.file	26	"/usr/include/texture_fetch_functions.h"
	.file	27	"/usr/include/math_functions_dbl_ptx1.h"


	.entry _Z6kerneljPjS_S_ (
		.param .u32 __cudaparm__Z6kerneljPjS_S__N,
		.param .u64 __cudaparm__Z6kerneljPjS_S__a,
		.param .u64 __cudaparm__Z6kerneljPjS_S__b,
		.param .u64 __cudaparm__Z6kerneljPjS_S__r)
	{
	.reg .u16 %rh<6>;
	.reg .u32 %r<17>;
	.reg .u64 %rd<6>;
	.reg .pred %p<3>;
	.loc	14	4	0
$LDWbegin__Z6kerneljPjS_S_:
	mov.u16 	%rh1, %ctaid.x;
	mov.u16 	%rh2, %ntid.x;
	mul.wide.u16 	%r1, %rh1, %rh2;
	cvt.u32.u16 	%r2, %tid.x;
	add.u32 	%r3, %r2, %r1;
	ld.param.u32 	%r4, [__cudaparm__Z6kerneljPjS_S__N];
	cvt.u32.u16 	%r5, %tid.y;
	mov.u16 	%rh3, %ctaid.y;
	mov.u16 	%rh4, %ntid.y;
	mul.wide.u16 	%r6, %rh3, %rh4;
	add.u32 	%r7, %r5, %r6;
	set.gt.u32.u32 	%r8, %r4, %r7;
	neg.s32 	%r9, %r8;
	set.lt.u32.u32 	%r10, %r3, %r4;
	neg.s32 	%r11, %r10;
	and.b32 	%r12, %r9, %r11;
	mov.u32 	%r13, 0;
	setp.eq.s32 	%p1, %r12, %r13;
	@%p1 bra 	$Lt_0_1282;
	.loc	14	12	0
	ld.param.u64 	%rd1, [__cudaparm__Z6kerneljPjS_S__r];
	cvt.u64.u32 	%rd2, %r3;
	mul.wide.u32 	%rd3, %r3, 4;
	add.u64 	%rd4, %rd1, %rd3;
	ld.global.u32 	%r14, [%rd4+0];
	add.u32 	%r15, %r14, 1;
	st.global.u32 	[%rd4+0], %r15;
	.loc	14	13	0
	st.global.u32 	[%rd4+0], %r14;
$Lt_0_1282:
	.loc	14	15	0
	exit;
$LDWend__Z6kerneljPjS_S_:
	} // _Z6kerneljPjS_S_

